---
networks:
  auto-weathernet: {}
  postgres_data: {}

services:

  rabbitmq:
    image: rabbitmq
    container_name: auto-weather-rabbitmq
    restart: unless-stopped
    ports:
      - ${RABBITMQ_PORT:-5672}:5672
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-rabbitmq}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbitmq}
    networks:
      - auto-weathernet

  redis:
    image: redis
    container_name: auto-weather-redis
    restart: unless-stopped
    ports:
    - ${REDIS_PORT:-6379}:6379
    networks:
      - auto-weathernet

  postgres:
    image: postgres:${POSTGRES_IMAGE_TAG:-bullseye}
    container_name: ${POSTGRES_CONTAINER_NAME:-auto-weather-postgres}
    restart: unless-stopped
    user: "$UID:$GID"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      # Read section on this variable in docker docs before setting:
      #   https://hub.docker.com/_/postgres/
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE:-postgres}
    expose:
      - 5432
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    volumes:
      - ${POSTGRES_DATA_DIR:-postgres_data}:/var/lib/postgresql/data
      # Mount directory with init scripts for docker, i.e. install UUID extension
      - ${POSTGRES_ENTRYPOINT_DIR:-./containers/vols/pg_entrypoint}:/docker-entrypoint-initdb.d/
      # Mount directory to store SQL scripts
      - ${POSTGRES_SCRIPTS_DIR:-./containers/vols/pgsql_scripts}:/scripts
      # Uncomment line below to restore a database backup.
      # - ${POSTGRES_DB_BACKUP}:/path/here
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -d $${POSTGRES_DATABASE} -U $${POSTGRES_USER}",
        ]
      interval: 1s
      timeout: 5s
      retries: 10
    networks:
      - auto-weathernet

  db_init:
    ## Container to initialize the Postgres database for the weather app.
    #  Runs when the stack is brought up, does not restart.
    container_name: "auto-weather-db_init"
    restart: no
    build:
      context: .
      dockerfile: Dockerfile
      args:
        UV_IMAGE_VER: ${UV_IMAGE_VER:-0.4.27}
        PYTHON_IMAGE_VER: ${PYTHON_IMAGE_VER:-3.12-slim}
      target: run_scripts
    entrypoint: ["uv", "run", "python", "/project/scripts/db_init.py"]
    depends_on:
      - postgres
    volumes:
      - ./src:/project/src
      - ./alembic.ini:/project/alembic.ini
      - ./migrations:/project/migrations
      - ./scripts:/project/scripts
    environment:
      DYNACONF_LOG_LEVEL: DEBUG
      DYNACONF_DB_TYPE: ${DB_TYPE:-postgres}
      DYNACONF_DB_DRIVERNAME: ${DB_DRIVERNAME:-postgresql+psycopg2}
      DYNACONF_DB_HOST: ${DB_HOST:-postgres}
      DYNACONF_DB_PORT: ${DB_PORT:-5432}
      DYNACONF_DB_NAME: ${DB_NAME:-auto_weather}
      DYNACONF_DB_USERNAME: ${POSTGRES_USER:-postgres}
      DYNACONF_DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}  
      DYNACONF_DB_DATABASE: ${POSTGRES_DATABASE:-auto_weather}  
    networks:
      - auto-weathernet
  
  celery_worker:
    container_name: auto-weather-celery-worker
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile
      args:
        UV_IMAGE_VER: ${UV_IMAGE_VER:-0.4.27}
        PYTHON_IMAGE_VER: ${PYTHON_IMAGE_VER:-3.12-slim}
    command: ['uv', 'run', 'celery', '-A', 'auto_weather.celeryapp.celery_main.celery_app', "worker", '-l', 'info']
    environment:
      CELERY_TZ: ${TZ:-Etc/UTC}
      CELERY_BROKER_URL: amqp://${RABBITMQ_USER:-rabbitmq}:${RABBITMQ_PASSWORD:-rabbitmq}@rabbitmq:5672//
      CELERY_BACKEND_URL: redis://redis:6379/0
      C_FORCE_ROOT: true

      DYNACONF_DB_TYPE: ${DB_TYPE:-postgres}
      DYNACONF_DB_DRIVERNAME: ${DB_DRIVERNAME:-postgresql+psycopg2}
      DYNACONF_DB_HOST: ${DB_HOST:-postgres}
      DYNACONF_DB_PORT: ${DB_PORT:-5432}
      DYNACONF_DB_NAME: ${DB_NAME:-auto_weather}
      DYNACONF_DB_USERNAME: ${POSTGRES_USER:-postgres}
      DYNACONF_DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DYNACONF_DB_DATABASE: ${POSTGRES_DATABASE:-auto_weather}
      # DB_URL: ${DB_URL:-postgresql+psycopg2://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@${DB_HOST:-postgres}:${DB_PORT:-5432}/${DB_NAME:-auto_weather}}
    volumes:
      - ./src:/project/src
      - ./alembic.ini:/project/alembic.ini
    depends_on:
      - rabbitmq
      - redis
      - postgres
    networks:
      - auto-weathernet

  celery_beat:
    container_name: auto-weather-celery-beat
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile
      args:
        UV_IMAGE_VER: ${UV_IMAGE_VER:-0.4.27}
        PYTHON_IMAGE_VER: ${PYTHON_IMAGE_VER:-3.12-slim}
    command: ['uv', 'run', 'celery', '-A', 'auto_weather.celeryapp.celery_main.celery_app', "beat", '-l', '${CELERY_LOG_LEVEL:-info}']
    environment:
      CELERY_TZ: ${TZ:-Etc/UTC}
      CELERY_BROKER_URL: amqp://${RABBITMQ_USER:-rabbitmq}:${RABBITMQ_PASSWORD:-rabbitmq}@rabbitmq:5672//
      CELERY_BACKEND_URL: redis://redis:6379/0
      CELERY_LOG_LEVEL: ${CELERY_LOG_LEVEL:-info}
      C_FORCE_ROOT: true

      DYNACONF_DB_TYPE: ${DB_TYPE:-postgres}
      DYNACONF_DB_DRIVERNAME: ${DB_DRIVERNAME:-postgresql+psycopg2}
      DYNACONF_DB_HOST: ${DB_HOST:-postgres}
      DYNACONF_DB_PORT: ${DB_PORT:-5432}
      DYNACONF_DB_NAME: ${DB_NAME:-auto_weather}
      DYNACONF_DB_USERNAME: ${DB_USER:-postgres}
      DYNACONF_DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DYNACONF_DB_DATABASE: ${POSTGRES_DATABASE:-auto_weather}
      # DB_URL: ${DB_URL:-postgresql+psycopg2://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@${DB_HOST:-postgres}:${DB_PORT:-5432}/${DB_NAME:-auto_weather}}

    volumes:
      - ./src:/project/src
      - ./alembic.ini:/project/alembic.ini
    depends_on:
      - rabbitmq
      - redis
      - postgres
    networks:
      - auto-weathernet

